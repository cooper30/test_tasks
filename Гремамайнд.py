"""
Задача
Реализовать функцию рассчитывающую необходимость начисления бонуса “Быстрый старт” пользователям, для которых
выполняется условие.
На вход функция принимает структуру пользователей, на выходе просто принт списка
<Пользователь> <Список пользователей, за которых начислен бонус>

Исходные данные
Есть сайт с пользователям, каждый пользователь при регистрации указывает ID пригласителя и таким образом выстраивается
некоторая реферальная структура. На сайте пользователи могут совершать покупку одного из пакетов услуг, условно пакеты
называются “500”, “1500” и “3000”.
Для выполнения тестового задания структура данных для расчета может быть задана в коде в виде словаря или списка или
любым другим способом, на усмотрение разработчика.

Условие для начисления бонуса “Быстрый старт”
Пользователю необходимо, чтобы 2 его лично приглашенных реферала купили по пакету, который позволяет получать
бонус “Быстрый старт” (Пакет 1500 или выше) и их 2 реферала также купили пакеты, которые позволяют получить
бонус “Быстрый старт” (Пакет 1500 или выше).

То есть под пользователем, у которого пакет 1500, купили пакеты 6 пользователей.
Минимальный пакет для получения данного бонуса - пакет 1500.
Срок выполнения условия по покупке партнерами пакетов 1 месяц с момента покупки пакета пользователем, который получит
бонус “Быстрого старта”.
Данный бонус может быть начислен несколько раз если данное условие выполнено несколько раз.
"""

USERS = {
    1: {"name": "Пользователь 1", "package": 1500, "referrals": [2, 3]},
    2: {"name": "Пользователь 2", "package": 3000, "referrals": [4, 5]},
    3: {"name": "Пользователь 3", "package": 1500, "referrals": [6]},
    4: {"name": "Пользователь 4", "package": 500, "referrals": []},
    5: {"name": "Пользователь 5", "package": 1500, "referrals": []},
    6: {"name": "Пользователь 6", "package": 3000, "referrals": []}
}

def can_bonus(user_data: dict) -> bool:
    if user_data["package"] < 1500:
        return False

    first_level_referrals = user_data["referrals"]

    if len(first_level_referrals) < 2:
        return False

    second_level_referrals = []

    for referral_id in first_level_referrals:
        referral = USERS[referral_id]
        if referral["package"] >= 1500:
            second_level_referrals.extend(referral["referrals"])

    if len(second_level_referrals) < 2:
        return False

    valid_second_level = [ref for ref in second_level_referrals if USERS[ref]["package"] >= 1500]

    return len(valid_second_level) >= 2

def print_users_with_receive_bonus() -> None:
    user_bonuses = []

    for user_id, user_data in USERS.items():
        if can_bonus(user_data):
            user_bonuses.append(user_id)

    print(user_bonuses)

if __name__ == '__main__':
    print_users_with_receive_bonus()